- name: Configure Dynamic Mappings for User Device Group
  hosts: fortimanagers
  connection: httpapi
  collections:
    - fortinet.fortimanager

  vars:
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: 443
    ansible_user: "admin"
    ansible_password: "admin"
    ansible_network_os: fortinet.fortimanager.fortimanager

    # Customizable Variables
    adom: "ansible"                  # Target ADOM
    device_group_name: "HUBs" # User Device Group name
    target_device: "Hub"         # FortiGate device name (must exist)
    target_vdom: "root"              # VDOM name (default: "root")

  tasks:
    # Step 1: Verify the User Device Group exists (optional but recommended)
    - name: Check if User Device Group exists
      fortinet.fortimanager.fmgr_fact:
        facts:
          selector: "user_devicegroup"
          params:
            adom: "{{ adom }}"
            device-group: "{{ device_group_name }}"
      register: group_check

    - name: Fail if group does not exist
      ansible.builtin.fail:
        msg: "User Device Group '{{ device_group_name }}' does not exist in ADOM '{{ adom }}'"
      when: not group_check.meta.response_data or group_check.meta.response_data | length == 0

    # Step 2: Configure Dynamic Mapping
    - name: Add/Update Dynamic Mapping for the User Device Group
      fortinet.fortimanager.fmgr_user_devicegroup_dynamicmapping:
        adom: "{{ adom }}"
        device-group: "{{ device_group_name }}"
        state: "present"
        user_devicegroup_dynamicmapping:
          _scope:
            - name: "{{ target_device }}"  # Device must exist in FortiManager
              vdom: "{{ target_vdom }}"     # Valid VDOM under the device
          comment: "Managed by Ansible"
      register: mapping_result

    # Step 3: Commit Changes (required for FortiManager)
    - name: Commit changes to FortiManager
      fortinet.fortimanager.fmgr_exec:
        exec:
          adom: "{{ adom }}"
          scope: "global"
          action: "commit"
      when: mapping_result is changed

    # Step 4: Display Results
    - name: Show Dynamic Mapping Result
      ansible.builtin.debug:
        var: mapping_result