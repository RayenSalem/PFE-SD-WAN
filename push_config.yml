- name: Commit config to multiple devices
  hosts: fortimanager
  gather_facts: false
  connection: httpapi
  vars:
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: 443
    ansible_command_timeout: 120
    ansible_warnings: false
    device_adom: "root"
    device_vdom: "root"
    devices:
      - name: "Hub"
      - name: "spoke1"
      - name: "spoke2"

  tasks:
    - name: Get device object IDs
      fortinet.fortimanager.fmgr_fact:
        facts:
          selector: "dvmdb_device"
          params:
            adom: "{{ device_adom }}"
      register: device_facts

    - name: Set device object IDs
      set_fact:
        device_ids: >-
          {{
            device_facts.meta.response_data
            | selectattr('name', 'in', devices | map(attribute='name') | list)
            | map(attribute='oid')
            | list
          }}

    - name: Invoke the task for all devices
      fortinet.fortimanager.fmgr_securityconsole_install_device:
        securityconsole_install_device:
          adom: "{{ device_adom }}"
          scope: "{{ devices }}"
      register: installing_task

    - name: Inspect the Task Status
      fortinet.fortimanager.fmgr_fact:
        facts:
          selector: "task_task"
          params:
            task: "{{ installing_task.meta.response_data.task }}"
      register: taskinfo
      until: taskinfo.meta.response_data.percent == 100
      retries: 30
      delay: 3

    - name: Reload and retrieve the device list from FortiManager
      fortinet.fortimanager.fmgr_dvm_cmd_reload_devlist:
        workspace_locking_adom: "{{ device_adom }}"
        workspace_locking_timeout: 300
        dvm_cmd_reload_devlist:
          adom: "{{ device_adom }}"
          flags:
            - create_task
            - nonblocking
          from: fgfm
          reload_dev_member_list: "{{ device_ids | flatten | list }}"
      register: reload_task

    - name: Monitor reload task status
      fortinet.fortimanager.fmgr_fact:
        facts:
          selector: "task_task"
          params:
            task: "{{ reload_task.meta.response_data.task }}"
      register: reload_taskinfo
      until: reload_taskinfo.meta.response_data.percent == 100
      retries: 30
      delay: 5
      ignore_errors: yes